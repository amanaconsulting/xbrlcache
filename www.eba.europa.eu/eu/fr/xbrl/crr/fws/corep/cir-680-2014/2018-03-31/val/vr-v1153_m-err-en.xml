<?xml version="1.0" encoding="utf-8"?>
<?taxonomy-version 2.3.1.1 ?> <?taxonomy-set-overall-version 2.8.0.1 ?>
<!--(C) EBA-->
<link:linkbase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:gen="http://xbrl.org/2008/generic" xmlns:label="http://xbrl.org/2008/label" xmlns:msg="http://xbrl.org/2010/message" xmlns:eba_fmt="http://www.eba.europa.eu/xbrl/crr/func/error-formatting" xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd http://xbrl.org/2008/generic http://www.xbrl.org/2008/generic-link.xsd http://xbrl.org/2008/label http://www.xbrl.org/2008/generic-label.xsd http://xbrl.org/2010/message http://www.xbrl.org/2010/generic-message.xsd">
  <link:arcroleRef arcroleURI="http://xbrl.org/arcrole/2010/assertion-unsatisfied-message" xlink:type="simple" xlink:href="http://www.xbrl.org/2010/validation-message.xsd#assertion-unsatisfied-message" />
  <link:roleRef roleURI="http://www.xbrl.org/2010/role/message" xlink:type="simple" xlink:href="http://www.xbrl.org/2010/generic-message.xsd#standard-message" />
  <link:roleRef roleURI="http://www.xbrl.org/2010/role/terseMessage" xlink:type="simple" xlink:href="http://www.xbrl.org/2010/generic-message.xsd#terse-message" />
  <gen:link xlink:type="extended" xlink:role="http://www.xbrl.org/2003/role/link">
    <link:loc xlink:type="locator" xlink:href="vr-v1153_m.xml#eba_v1153_m" xlink:label="loc_eba_v1153_m" />
    <msg:message xlink:type="resource" xlink:label="eba_v1153_m" xml:lang="en" xlink:role="http://www.xbrl.org/2010/role/message">v1153_m: [C 16.00.a] if ({{r110, c040}} = empty and {{r110, c050}} = empty and {{r110, c060}} = empty and {{r120, c040}} = empty and {{r120, c050}} = empty and {{r120, c060}} = empty and ({{r030, c010}} * 18% + {{r040, c010}} * 18% + {{r050, c010}} * 12% + {{r060, c010}} * 15% + {{r070, c010}} * 12% + {{r080, c010}} * 18% + {{r090, c010}} * 15% + {{r100, c010}} * 12%) &gt; 0 and ({{r030, c020}} * 18% + {{r040, c020}} * 18% + {{r050, c020}} * 12% + {{r060, c020}} * 15% + {{r070, c020}} * 12% + {{r080, c020}} * 18% + {{r090, c020}} * 15% + {{r100, c020}} * 12%) &gt; 0 and ({{r030, c030}} * 18% + {{r040, c030}} * 18% + {{r050, c030}} * 12% + {{r060, c030}} * 15% + {{r070, c030}} * 12% + {{r080, c030}} * 18% + {{r090, c030}} * 15% + {{r100, c030}} * 12%) &gt; 0) then ({{r020, c070}} * 3 = {{r030, c010}} * 18% + {{r040, c010}} * 18% + {{r050, c010}} * 12% + {{r060, c010}} * 15% + {{r070, c010}} * 12% + {{r080, c010}} * 18% + {{r090, c010}} * 15% + {{r100, c010}} * 12% + {{r030, c020}} * 18% + {{r040, c020}} * 18% + {{r050, c020}} * 12% + {{r060, c020}} * 15% + {{r070, c020}} * 12% + {{r080, c020}} * 18% + {{r090, c020}} * 15% + {{r100, c020}} * 12% + {{r030, c030}} * 18% + {{r040, c030}} * 18% + {{r050, c030}} * 12% + {{r060, c030}} * 15% + {{r070, c030}} * 12% + {{r080, c030}} * 18% + {{r090, c030}} * 15% + {{r100, c030}} * 12%) FAILS because if (((empty({eba_fmt:interval($a)}) or xff:has-fallback-value(QName('', 'a'))) and (empty({eba_fmt:interval($b)}) or xff:has-fallback-value(QName('', 'b'))) and (empty({eba_fmt:interval($c)}) or xff:has-fallback-value(QName('', 'c'))) and (empty({eba_fmt:interval($d)}) or xff:has-fallback-value(QName('', 'd'))) and (empty({eba_fmt:interval($e)}) or xff:has-fallback-value(QName('', 'e'))) and (empty({eba_fmt:interval($f)}) or xff:has-fallback-value(QName('', 'f'))) and iaf:numeric-greater-than((iaf:sum((iaf:numeric-multiply({eba_fmt:interval($g)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($h)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($i)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($j)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($k)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($l)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($m)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($n)}, 0.12)))), 0) and iaf:numeric-greater-than((iaf:sum((iaf:numeric-multiply({eba_fmt:interval($o)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($p)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($q)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($r)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($s)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($t)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($u)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($v)}, 0.12)))), 0) and iaf:numeric-greater-than((iaf:sum((iaf:numeric-multiply({eba_fmt:interval($w)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($x)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($y)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($z)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($aa)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($bb)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($cc)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($dd)}, 0.12)))), 0))) then ((iaf:numeric-equal(iaf:numeric-multiply({eba_fmt:interval($ee)}, 3), iaf:sum((iaf:numeric-multiply({eba_fmt:interval($ff)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($gg)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($hh)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($ii)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($jj)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($kk)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($ll)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($mm)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($nn)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($oo)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($pp)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($qq)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($rr)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($ss)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($tt)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($uu)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($vv)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($ww)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($xx)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($yy)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($zz)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($aaa)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($bbb)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($ccc)}, 0.12)))))) else (true()) is not true</msg:message>
    <gen:arc xlink:type="arc" xlink:arcrole="http://xbrl.org/arcrole/2010/assertion-unsatisfied-message" xlink:from="loc_eba_v1153_m" xlink:to="eba_v1153_m" />
    <msg:message xlink:type="resource" xlink:label="eba_v1153_m_1" xml:lang="en" xlink:role="http://www.xbrl.org/2010/role/terseMessage">v1153_m: [C 16.00.a] if ({{r110, c040}} = empty and {{r110, c050}} = empty and {{r110, c060}} = empty and {{r120, c040}} = empty and {{r120, c050}} = empty and {{r120, c060}} = empty and ({{r030, c010}} * 18% + {{r040, c010}} * 18% + {{r050, c010}} * 12% + {{r060, c010}} * 15% + {{r070, c010}} * 12% + {{r080, c010}} * 18% + {{r090, c010}} * 15% + {{r100, c010}} * 12%) &gt; 0 and ({{r030, c020}} * 18% + {{r040, c020}} * 18% + {{r050, c020}} * 12% + {{r060, c020}} * 15% + {{r070, c020}} * 12% + {{r080, c020}} * 18% + {{r090, c020}} * 15% + {{r100, c020}} * 12%) &gt; 0 and ({{r030, c030}} * 18% + {{r040, c030}} * 18% + {{r050, c030}} * 12% + {{r060, c030}} * 15% + {{r070, c030}} * 12% + {{r080, c030}} * 18% + {{r090, c030}} * 15% + {{r100, c030}} * 12%) &gt; 0) then ({{r020, c070}} * 3 = {{r030, c010}} * 18% + {{r040, c010}} * 18% + {{r050, c010}} * 12% + {{r060, c010}} * 15% + {{r070, c010}} * 12% + {{r080, c010}} * 18% + {{r090, c010}} * 15% + {{r100, c010}} * 12% + {{r030, c020}} * 18% + {{r040, c020}} * 18% + {{r050, c020}} * 12% + {{r060, c020}} * 15% + {{r070, c020}} * 12% + {{r080, c020}} * 18% + {{r090, c020}} * 15% + {{r100, c020}} * 12% + {{r030, c030}} * 18% + {{r040, c030}} * 18% + {{r050, c030}} * 12% + {{r060, c030}} * 15% + {{r070, c030}} * 12% + {{r080, c030}} * 18% + {{r090, c030}} * 15% + {{r100, c030}} * 12%) FAILS because if (((empty({eba_fmt:interval($a)}) or xff:has-fallback-value(QName('', 'a'))) and (empty({eba_fmt:interval($b)}) or xff:has-fallback-value(QName('', 'b'))) and (empty({eba_fmt:interval($c)}) or xff:has-fallback-value(QName('', 'c'))) and (empty({eba_fmt:interval($d)}) or xff:has-fallback-value(QName('', 'd'))) and (empty({eba_fmt:interval($e)}) or xff:has-fallback-value(QName('', 'e'))) and (empty({eba_fmt:interval($f)}) or xff:has-fallback-value(QName('', 'f'))) and iaf:numeric-greater-than((iaf:sum((iaf:numeric-multiply({eba_fmt:interval($g)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($h)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($i)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($j)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($k)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($l)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($m)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($n)}, 0.12)))), 0) and iaf:numeric-greater-than((iaf:sum((iaf:numeric-multiply({eba_fmt:interval($o)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($p)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($q)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($r)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($s)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($t)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($u)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($v)}, 0.12)))), 0) and iaf:numeric-greater-than((iaf:sum((iaf:numeric-multiply({eba_fmt:interval($w)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($x)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($y)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($z)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($aa)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($bb)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($cc)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($dd)}, 0.12)))), 0))) then ((iaf:numeric-equal(iaf:numeric-multiply({eba_fmt:interval($ee)}, 3), iaf:sum((iaf:numeric-multiply({eba_fmt:interval($ff)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($gg)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($hh)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($ii)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($jj)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($kk)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($ll)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($mm)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($nn)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($oo)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($pp)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($qq)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($rr)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($ss)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($tt)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($uu)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($vv)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($ww)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($xx)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($yy)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($zz)}, 0.12), iaf:numeric-multiply({eba_fmt:interval($aaa)}, 0.18), iaf:numeric-multiply({eba_fmt:interval($bbb)}, 0.15), iaf:numeric-multiply({eba_fmt:interval($ccc)}, 0.12)))))) else (true()) is not true</msg:message>
    <gen:arc xlink:type="arc" xlink:arcrole="http://xbrl.org/arcrole/2010/assertion-unsatisfied-message" xlink:from="loc_eba_v1153_m" xlink:to="eba_v1153_m_1" />
  </gen:link>
</link:linkbase>