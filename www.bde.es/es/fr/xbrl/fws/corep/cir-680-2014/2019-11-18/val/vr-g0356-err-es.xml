<?xml version="1.0" encoding="utf-8"?>
<!--© Banco de España. Reservados todos los derechos-->
<link:linkbase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:gen="http://xbrl.org/2008/generic" xmlns:label="http://xbrl.org/2008/label" xmlns:msg="http://xbrl.org/2010/message" xmlns:fmt="http://www.bde.es/xbrl/func/error-formatting" xmlns:iaf="http://www.eurofiling.info/xbrl/func/interval-arithmetics" xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd http://xbrl.org/2008/generic http://www.xbrl.org/2008/generic-link.xsd http://xbrl.org/2008/label http://www.xbrl.org/2008/generic-label.xsd http://xbrl.org/2010/message http://www.xbrl.org/2010/generic-message.xsd">
  <link:arcroleRef arcroleURI="http://xbrl.org/arcrole/2010/assertion-unsatisfied-message" xlink:type="simple" xlink:href="http://www.xbrl.org/2010/validation-message.xsd#assertion-unsatisfied-message" />
  <link:roleRef roleURI="http://www.xbrl.org/2010/role/message" xlink:type="simple" xlink:href="http://www.xbrl.org/2010/generic-message.xsd#standard-message" />
  <gen:link xlink:type="extended" xlink:role="http://www.xbrl.org/2003/role/link">
    <link:loc xlink:type="locator" xlink:href="vr-g0356.xml#es_g0356" xlink:label="loc_es_g0356" />
    <msg:message xlink:type="resource" xlink:label="es_g0356" xml:lang="es" xlink:role="http://www.xbrl.org/2010/role/message">{fmt:common(($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} {fmt:fact($a, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} = ({fmt:fact($c, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($b, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($e, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($d, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($g, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($f, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($i, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($h, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($k, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($j, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($m, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($l, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($o, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($n, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($r, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($q, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($t, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($s, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($v, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($u, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($x, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($w, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($z, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($y, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($zb, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($za, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($zd, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($zc, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($zf, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($ze, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))}) + {fmt:fact($zh, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} * ({fmt:fact($zg, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))} div {fmt:fact($p, ($a, $c, $b, $p, $e, $d, $g, $f, $i, $h, $k, $j, $m, $l, $o, $n, $r, $q, $t, $s, $v, $u, $x, $w, $z, $y, $zb, $za, $zd, $zc, $zf, $ze, $zh, $zg))})) {fmt:threshold(iaf:error-margin($a) + iaf:error-margin((iaf:sum((iaf:numeric-multiply($c, (iaf:numeric-divide($b, $p))), iaf:numeric-multiply($e, (iaf:numeric-divide($d, $p))), iaf:numeric-multiply($g, (iaf:numeric-divide($f, $p))), iaf:numeric-multiply($i, (iaf:numeric-divide($h, $p))), iaf:numeric-multiply($k, (iaf:numeric-divide($j, $p))), iaf:numeric-multiply($m, (iaf:numeric-divide($l, $p))), iaf:numeric-multiply($o, (iaf:numeric-divide($n, $p))), iaf:numeric-multiply($r, (iaf:numeric-divide($q, $p))), iaf:numeric-multiply($t, (iaf:numeric-divide($s, $p))), iaf:numeric-multiply($v, (iaf:numeric-divide($u, $p))), iaf:numeric-multiply($x, (iaf:numeric-divide($w, $p))), iaf:numeric-multiply($z, (iaf:numeric-divide($y, $p))), iaf:numeric-multiply($zb, (iaf:numeric-divide($za, $p))), iaf:numeric-multiply($zd, (iaf:numeric-divide($zc, $p))), iaf:numeric-multiply($zf, (iaf:numeric-divide($ze, $p))), iaf:numeric-multiply($zh, (iaf:numeric-divide($zg, $p))))))))} {fmt:difference(abs(($a) - (($c * ($b div $p) + $e * ($d div $p) + $g * ($f div $p) + $i * ($h div $p) + $k * ($j div $p) + $m * ($l div $p) + $o * ($n div $p) + $r * ($q div $p) + $t * ($s div $p) + $v * ($u div $p) + $x * ($w div $p) + $z * ($y div $p) + $zb * ($za div $p) + $zd * ($zc div $p) + $zf * ($ze div $p) + $zh * ($zg div $p)))))}</msg:message>
    <gen:arc xlink:type="arc" xlink:arcrole="http://xbrl.org/arcrole/2010/assertion-unsatisfied-message" xlink:from="loc_es_g0356" xlink:to="es_g0356" />
  </gen:link>
</link:linkbase>